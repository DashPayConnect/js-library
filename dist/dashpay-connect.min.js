/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})((typeof self !== 'undefined' ? self : this), () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Client/Client.js":
/*!******************************!*\
  !*** ./src/Client/Client.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EDITOR_EXTENSION_ID = 'camoceckaeifkkpepgjoccjfjkcjhojc';\nclass Client {\n    constructor() {\n        this.CHROME_ID = EDITOR_EXTENSION_ID\n        this.state = \"IDLE\";\n        this.account = null;\n    }\n};\nClient.EDITOR_EXTENSION_ID = EDITOR_EXTENSION_ID;\nClient.prototype.connect = __webpack_require__(/*! ./methods/connect */ \"./src/Client/methods/connect.js\");\nClient.prototype.disconnect = __webpack_require__(/*! ./methods/disconnect */ \"./src/Client/methods/disconnect.js\");\nClient.prototype.getAccount = __webpack_require__(/*! ./methods/getAccount */ \"./src/Client/methods/getAccount.js\");\nClient.prototype.isConnected = __webpack_require__(/*! ./methods/isConnected */ \"./src/Client/methods/isConnected.js\");\nClient.prototype.sendMessage = __webpack_require__(/*! ./methods/sendMessage */ \"./src/Client/methods/sendMessage.js\");\nmodule.exports = Client;\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/Client.js?");

/***/ }),

/***/ "./src/Client/methods/connect.js":
/*!***************************************!*\
  !*** ./src/Client/methods/connect.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = async function connect() {\n    const EDITOR_EXTENSION_ID = this.CHROME_ID;\n    window.addEventListener(\"message\", async (message)=>{\n        console.log('DEBUG: MESSAGE', {message});\n        return true\n    });\n\n    const self = this;\n\n    return new Promise((resolve) => {\n        chrome.runtime.sendMessage(EDITOR_EXTENSION_ID, {action: \"CONNECT\"},\n            function (response) {\n                console.log({receivedResponseFromConnect: response});\n                if (response && response.action === 'CONNECT') {\n                    this.state = 'connected';\n                    //FIXME: Should use another internal to handle this.\n                    chrome.runtime.sendMessage(EDITOR_EXTENSION_ID, {action: \"FETCH\", args: ['ACCOUNT']}, (response)=>{\n                        self.account = response.args[1];\n                        resolve(self.account);\n                        window.removeEventListener(\"message\", onConnectAwait);\n                    });\n                }\n            });\n\n\n        const onAccountUpdate = function (event) {\n            const {args, type} = event.data;\n            if (type === 'ACCOUNT') {\n                self.account = args[0]\n                console.log('THIS ACCOUNT SET', self.account);\n            }\n        };\n        const onConnectAwait = function (event) {\n            const {args, type} = event.data;\n            if (type === 'ACCOUNT') {\n                this.state = 'connected';\n                res(true);\n                window.removeEventListener(\"message\", onConnectAwait);\n            }\n        }\n\n        window.addEventListener(\"message\", onAccountUpdate);\n        if (chrome.runtime.onMessage) {\n            // Context not available within a page, but available and needed when called fro register.html\n            chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n                console.log({messageReceivedInIndex: message});\n            })\n        }\n        window.addEventListener(\"message\", onConnectAwait);\n    });\n}\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/methods/connect.js?");

/***/ }),

/***/ "./src/Client/methods/disconnect.js":
/*!******************************************!*\
  !*** ./src/Client/methods/disconnect.js ***!
  \******************************************/
/***/ ((module) => {

eval("module.exports = function disconnect() {\n}\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/methods/disconnect.js?");

/***/ }),

/***/ "./src/Client/methods/getAccount.js":
/*!******************************************!*\
  !*** ./src/Client/methods/getAccount.js ***!
  \******************************************/
/***/ ((module) => {

eval("module.exports = function getAccount() {\n    console.log('THIS ACCOUNT REQ', this.account);\n\n    return this.account;\n}\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/methods/getAccount.js?");

/***/ }),

/***/ "./src/Client/methods/isConnected.js":
/*!*******************************************!*\
  !*** ./src/Client/methods/isConnected.js ***!
  \*******************************************/
/***/ ((module) => {

eval("module.exports = function isConnected() {\n    return this.state === 'CONNECTED';\n}\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/methods/isConnected.js?");

/***/ }),

/***/ "./src/Client/methods/sendMessage.js":
/*!*******************************************!*\
  !*** ./src/Client/methods/sendMessage.js ***!
  \*******************************************/
/***/ ((module) => {

eval("module.exports = async function sendMessage(message){\n    const EDITOR_EXTENSION_ID = this.CHROME_ID;\n    return new Promise(async (res)=>{\n        const x = await chrome.runtime.sendMessage(EDITOR_EXTENSION_ID, message, async (response)=>{\n            console.log({response});\n            console.log('lastError',chrome.runtime.lastError)\n            res(response);\n            return true;\n        });\n        console.log({x});\n    })\n}\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/Client/methods/sendMessage.js?");

/***/ }),

/***/ "./src/index.browser.js":
/*!******************************!*\
  !*** ./src/index.browser.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {DashPayConnect:__webpack_require__(/*! ./index */ \"./src/index.js\")};\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/index.browser.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Client = __webpack_require__(/*! ./Client/Client */ \"./src/Client/Client.js\")\nmodule.exports = { Client }\n\n\n//# sourceURL=webpack://@dashpayconnect/js-library/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.browser.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});